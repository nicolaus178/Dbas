
1. 
--Display posts and tags
SELECT Post.Title,
       STRING_AGG(PostTag.Tag, ', ') AS Tags
FROM Post
LEFT JOIN PostTag ON Post.PostID = PostTag.PostID
GROUP BY Post.Title;


2.
WITH RankedPosts AS (
  SELECT 
    p.PostID,                      -- Post ID
    p.Title,                        -- Post Title
    COUNT(l.PostID) AS likes_count, -- Number of Likes
    RANK() OVER (ORDER BY COUNT(l.PostID) DESC) AS rank -- Ranking posts by likes count
  FROM 
    Post p
  JOIN 
    PostTag pt ON p.PostID = pt.PostID  -- Join to filter posts by tag
  LEFT JOIN 
    Likes l ON p.PostID = l.PostID     -- Left join to count likes
  WHERE 
    pt.Tag = '#leadership'  -- Filter for the '#leadership' tag
  GROUP BY 
    p.PostID, p.Title  -- Group by PostID and Title
)
SELECT 
  PostID,
  Title,
  rank
FROM 
  RankedPosts
WHERE 
  rank <= 5;  -- Return only the top 5 posts

3.
-- Count subscriptions in the given period and separate first-time and returning users
-- CTE to get the week number for each subscription date
WITH SubscriptionsWithWeek AS (
    SELECT 
        UserID,
        Date,
        DATE_PART('week', Date) AS WeekNumber
    FROM Subscription
),
-- CTE to get the first subscription date for each user
FirstSubscriptions AS (
    SELECT 
        UserID, 
        MIN(Date) AS FirstSubscriptionDate
    FROM Subscription
    GROUP BY UserID
),
-- CTE to list each post along with its week number
PostsWithWeek AS (
    SELECT
        PostID,
        DATE_PART('week', Date) AS WeekNumber
    FROM Post
),
-- CTE to count the total number of posts per week
NumberOfPosts AS (
    SELECT
        WeekNumber,
        COUNT(PostID) AS NumberOfPosts
    FROM PostsWithWeek
    GROUP BY WeekNumber
),
-- CTE to generate all weeks in a year
AllWeeks AS (
    SELECT generate_series(1, 52) AS WeekNumber
)
SELECT
    w.WeekNumber,
    SUM(CASE WHEN s.Date = f.FirstSubscriptionDate THEN 1 ELSE 0 END) AS new_customers,
    SUM(CASE WHEN s.Date != f.FirstSubscriptionDate THEN 1 ELSE 0 END) AS kept_customers,
    COALESCE(p.NumberOfPosts, 0) AS Activity
FROM AllWeeks w
LEFT JOIN SubscriptionsWithWeek s ON s.WeekNumber = w.WeekNumber
LEFT JOIN FirstSubscriptions f ON s.UserID = f.UserID
LEFT JOIN NumberOfPosts p ON p.WeekNumber = w.WeekNumber -- Only match on WeekNumber
GROUP BY w.WeekNumber, p.NumberOfPosts
ORDER BY w.WeekNumber;



4.
SELECT 
  u.name,  -- User's name
  CASE 
    WHEN COUNT(f.FriendID) > 0 THEN true  -- If the user has at least one friend
    ELSE false  -- If the user has no friends
  END AS has_friend,  
  s.date AS registration_date  -- Registration date from the Subscription table
FROM 
  Users u
LEFT JOIN 
  Friend f ON u.UserID = f.UserID OR u.UserID = f.FriendID  -- Check for friendships
JOIN 
  Subscription s ON u.UserID = s.UserID  -- Join with Subscription to get registration date
WHERE 
  EXTRACT(MONTH FROM s.date) = 1  -- Filter for January registrations
GROUP BY 
  u.UserID, u.name, s.date  -- Grouping by UserID, name, and registration date
ORDER BY 
  u.name;  -- Sorting by name alphabetically

5. 
WITH RECURSIVE FriendChain AS (
    -- Base case: Start with Anas (User ID 20)
    SELECT 
        u.name AS name,
        u.UserID AS user_id,
        f.FriendID AS friend_id
    FROM 
        Users u
    JOIN 
        Friend f
    ON 
        u.UserID = f.UserID
    WHERE 
        u.UserID = 20  -- Start with Anas
    
    UNION ALL
    
    -- Recursive case: Continue with the next friend
    SELECT 
        u2.name AS name,
        f.UserID AS user_id,
        f.FriendID AS friend_id
    FROM 
        FriendChain fc
    JOIN 
        Friend f
    ON 
        fc.friend_id = f.UserID
    JOIN 
        Users u2
    ON 
        f.UserID = u2.UserID
    WHERE 
        f.FriendID != fc.user_id  -- Prevent backtracking
)
SELECT 
    name, user_id, friend_id
FROM 
    FriendChain;


P+

WITH MarchPosts AS (
    -- Get posts created in March along with their authors
    SELECT 
        u.name AS author_name,
        p.PostID
    FROM 
        Post p
    JOIN 
        Users u
    ON 
        p.UserID = u.UserID
    WHERE 
        EXTRACT(MONTH FROM p.date) = 3  -- Filter for March
        AND EXTRACT(YEAR FROM p.date) = EXTRACT(YEAR FROM CURRENT_DATE)  -- Ensure it's the current year
),
MarchLikes AS (
    -- Count likes for each post created in March
    SELECT 
        mp.author_name,
        SUM(CASE WHEN l.PostID IS NOT NULL THEN 1 ELSE 0 END) AS total_likes
    FROM 
        MarchPosts mp
    LEFT JOIN 
        Likes l
    ON 
        mp.PostID = l.PostID
    GROUP BY 
        mp.author_name
)
-- Determine if total likes for each user is â‰¥ 50
SELECT 
    ml.author_name AS name,
    CASE 
        WHEN ml.total_likes >= 50 THEN TRUE
        ELSE FALSE
    END AS received_likes
FROM 
    MarchLikes ml;
