-- 1. Find the country with the fewest number of borders.
WITH CombinedBorders AS (
    -- Select country names and their neighboring countries (Country1 as the reference country).
    SELECT
        c.Name AS country_name,      -- Name of the country
        b.Country2 AS border_country -- The neighboring country
    FROM
        Country c                    -- Table containing country information
    JOIN
        borders b ON c.Code = b.Country1 -- Join Country table with borders on Country1
    
    UNION -- Combine results to include the reverse direction of borders.

    -- Select country names and their neighboring countries (Country2 as the reference country).
    SELECT
        c.Name AS country_name,      -- Name of the country
        b.Country1 AS border_country -- The neighboring country
    FROM
        Country c                    -- Table containing country information
    JOIN
        borders b ON c.Code = b.Country2 -- Join Country table with borders on Country2
),
BorderCounts AS (
    SELECT
        country_name,                    -- Name of the country
        COUNT(DISTINCT border_country) AS border_count -- Count of unique neighbors
    FROM
        CombinedBorders                  -- Use the CombinedBorders CTE
    GROUP BY
        country_name                     -- Group by country name to calculate the counts
)
SELECT
    country_name,                        -- Name of the country
    border_count                         -- Number of borders for the country
FROM
    BorderCounts                         -- Use the BorderCounts CTE
WHERE
    border_count = (                     -- Filter for the minimum border count
        SELECT MIN(border_count)         -- Find the smallest border count in the dataset
        FROM BorderCounts
    )
ORDER BY
    country_name ASC;                    -- Order the results alphabetically by country name



--Task 2
SELECT 
    -- Select the 'language' column from the 'spoken' table (s)
    s.language,

    -- Calculate the estimated number of speakers for each language
    -- Multiply the country's population by the percentage (converted to a fraction) of people who speak the language
    -- Sum this value across all countries for each language
    -- CAST the result to BIGINT to ensure it is an integer
    CAST(SUM(c.population * (s.percentage / 100.0)) AS BIGINT) AS numberspeaker
FROM 
    -- From the 'country' table (c) which contains country data, including population
    country c
JOIN 
    -- Join with the 'spoken' table
    spoken s 
ON 
-- Join condition: match the country code in 'country' table with the country code in 'spoken' table
    c.code = s.country
GROUP BY 
-- Group the results by language 
    s.language
HAVING 
-- Filter out languages with zero speakers
    SUM(c.population * (s.percentage / 100.0)) > 0
ORDER BY 
-- Order the results by the number of speakers, in descending order
    numberspeaker DESC;

--Task 3
WITH BorderCountryGdp AS(
    SELECT
        b.Country1 AS country1,                      -- Show country 1 code
        e1.GDP AS gdp1,                  -- Show GDP for country 1
        b.Country2 AS country2,                   -- Show the code of the bordering country (Country2)
        e2.GDP AS gdp2                    -- Show GDP for country 2
    FROM
    borders b
    JOIN
        economy e1 ON b.Country1 = e1.country         -- Join with economy table for country 1 GDP
    JOIN
        economy e2 ON b.Country2 = e2.country    -- Join with economy table for country 2 GDP
    WHERE 
        e1.gdp IS NOT NULL
        AND e2.gdp IS NOT NULL
)
SELECT 
    country1,
    gdp1,
    country2,
    gdp2,
    CAST((GREATEST(gdp1,gdp2) / LEAST(gdp1, gdp2) )AS BIGINT) AS ratio 
FROM
    BorderCountryGdp
ORDER BY ratio DESC;

-- P+

-- 1.
WITH RECURSIVE CombinedBorders AS (
    SELECT
        c.Code AS code,                -- Country code
        c.Name AS name,                -- Country name
        b.Country2 AS border_country   -- Neighboring country (Country2)
    FROM
        Country c
    JOIN
        borders b ON c.Code = b.Country1 -- Join to find neighbors of Country1
    UNION
    SELECT
        c.Code AS code,                -- Country code
        c.Name AS name,                -- Country name
        b.Country1 AS border_country   -- Neighboring country (Country1)
    FROM
        Country c
    JOIN
        borders b ON c.Code = b.Country2 -- Join to find neighbors of Country2
),
SwedenBordersFiveSteps AS (
    -- Base case: Find Sweden's immediate borders
    SELECT
        code,                         -- Sweden's code
        name,                         -- Sweden's name
        0 AS steps                    -- 0 steps for the starting point (Sweden itself)
    FROM
        CombinedBorders
    WHERE
        code = 'S'                    -- Starting from Sweden (code 'S')
    UNION ALL
    -- Recursive case: Find the next set of borders
    SELECT
        cb.code,                      -- Code of the neighboring country
        cb.name,                      -- Name of the neighboring country
        sbfs.steps + 1                -- Increment step count
    FROM
        SwedenBordersFiveSteps sbfs   -- Previous step's results
    JOIN
        CombinedBorders cb ON sbfs.code = cb.border_country -- Find next neighbors
    WHERE
        sbfs.steps < 5                -- Limit recursion depth to 5 steps
), MinSteps AS (
    SELECT
        code,                        -- Country code
        name,                        -- Country name
        MIN(steps) AS min_steps      -- Minimum steps required to reach this country
    FROM
        SwedenBordersFiveSteps
    GROUP BY
        code, name                   -- Group by country to calculate the minimum steps
)
SELECT
    code,                            -- Country code
    name,                            -- Country name
    min_steps AS steps               -- Minimum steps to reach the country
FROM
    MinSteps
WHERE
    code != 'S'                      -- Exclude Sweden from the results
ORDER BY
    steps, code, name;               -- Order by steps (ascending), then code and name

-- 2
-- Recursive Common Table Expression (CTE) to trace river branch connections
WITH RECURSIVE RiverSystem AS (
    -- Initial selection of main rivers (base case for recursion)
    SELECT 
        Name,                   -- Current river name
        Name AS MainRiver,      -- Main river (parent river)
        Name AS Branch,         -- Current branch
        ARRAY[Name]::VARCHAR[] AS RiverChain  -- Array to track river chain
    FROM River
    -- Limit to specific rivers for analysis
    WHERE Name IN ('Nile', 'Amazonas', 'Yangtze', 'Rhein', 'Donau', 'Mississippi')
    
    UNION
    
    -- Recursive part: Find connected branches for each river
    SELECT 
        rs.Name,                -- Keeps track of original main river
        rs.MainRiver,           -- Maintains the original main river name
        r.Name AS Branch,        -- New branch found through connection
        rs.RiverChain || r.Name  -- Append new branch to existing river chain
    FROM RiverSystem rs
    JOIN River r ON rs.Branch = r.River  -- Join to find connected branches
),
-- Calculate the number of rivers in each branch chain
BranchCounts AS (
    SELECT 
        MainRiver,               -- Main river name
        Branch,                  -- Branch river name
        array_length(RiverChain, 1) AS NumRivers,  -- Count of rivers in chain
        RiverChain               -- Full array of rivers in the chain
    FROM RiverSystem
),
-- Find the maximum number of rivers for each main river
LongestBranches AS (
    SELECT 
        MainRiver,
        MAX(NumRivers) AS MaxRivers  -- Longest branch chain for each main river
    FROM BranchCounts
    GROUP BY MainRiver
),
-- Rank branch chains based on number of rivers
RankedBranches AS (
    SELECT 
        bc.MainRiver,
        array_to_string(bc.RiverChain, ' -> ') AS Path,  -- Convert river chain to readable string
        bc.NumRivers,
        -- Rank rivers based on the number of rivers in the chain
        RANK() OVER (ORDER BY bc.NumRivers ASC) AS Rank,
        -- Calculate total length of the river chain
        (
            SELECT SUM(r.Length)
            FROM unnest(bc.RiverChain) AS chain_river -- Unnest expands the riverchain array into rows, so we can compute the chain effectively. 
            JOIN River r ON r.Name = chain_river -- We match each river in the expanded RiverChain array with its corresponding entry in the River table so we can get the length of each river. 
        ) AS TotalLength
    FROM BranchCounts bc
    JOIN LongestBranches lb 
        ON bc.MainRiver = lb.MainRiver AND bc.NumRivers = lb.MaxRivers
)
-- Final selection and output
SELECT 
    Rank,                  -- Ranking of river chains
    Path,                  -- Readable path of river connections
    NumRivers,             -- Number of rivers in the chain
    ROUND(TotalLength) AS TotalLength  -- Total length rounded to 2 decimal places
FROM RankedBranches
-- Sort by number of rivers ascending, then by total length descending
ORDER BY NumRivers ASC, TotalLength DESC;